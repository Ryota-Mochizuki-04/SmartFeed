"""
RSS LINE Notifier - LINE APIÈÄ£Êê∫„ÇØ„É©„Çπ
LINE Messaging API „Çí‰ΩøÁî®„Åó„Åü„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°„ÉªÁΩ≤ÂêçÊ§úË®º„ÅÆÂÆüË£Ö
"""

import json
import hmac
import hashlib
import base64
import logging
import requests
from typing import Dict, List, Optional, Any
from datetime import datetime, timezone


# „É≠„Ç∞Ë®≠ÂÆö
logger = logging.getLogger(__name__)


class LineClient:
    """LINE Messaging API „ÇØ„É©„Ç§„Ç¢„É≥„Éà"""

    def __init__(self, channel_access_token: str, channel_secret: str = None):
        """
        LINE API „ÇØ„É©„Ç§„Ç¢„É≥„ÉàÂàùÊúüÂåñ

        Args:
            channel_access_token: LINE Channel Access Token
            channel_secret: LINE Channel Secret (ÁΩ≤ÂêçÊ§úË®ºÁî®)
        """
        self.channel_access_token = channel_access_token
        self.channel_secret = channel_secret
        self.base_url = "https://api.line.me/v2/bot"
        self.logger = logging.getLogger(__name__)

        # HTTP „Çª„ÉÉ„Ç∑„Éß„É≥Ë®≠ÂÆö
        self.session = requests.Session()
        self.session.headers.update(
            {
                "Authorization": f"Bearer {channel_access_token}",
                "Content-Type": "application/json",
            }
        )

    def send_push_message(self, user_id: str, messages: List[Dict]) -> bool:
        """
        „Éó„ÉÉ„Ç∑„É•„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°

        Args:
            user_id: ÈÄÅ‰ø°ÂÖà„É¶„Éº„Ç∂„ÉºID
            messages: ÈÄÅ‰ø°„Åô„Çã„É°„ÉÉ„Çª„Éº„Ç∏„É™„Çπ„Éà

        Returns:
            bool: ÈÄÅ‰ø°ÊàêÂäü„ÉªÂ§±Êïó
        """
        try:
            url = f"{self.base_url}/message/push"
            payload = {"to": user_id, "messages": messages}

            # ‰∏ÄÊôÇÁöÑ„Å™„Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞
            self.logger.error(
                f"DEBUG: ÈÄÅ‰ø°„Åô„ÇãJSONÊßãÈÄ†: {json.dumps(payload, ensure_ascii=False, indent=2)}"
            )

            response = self.session.post(url, json=payload, timeout=30)
            response.raise_for_status()

            self.logger.info(
                f"LINE „Éó„ÉÉ„Ç∑„É•„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÊ≠£Â∏∏„Å´ÈÄÅ‰ø°„Åó„Åæ„Åó„Åü„ÄÇ„É¶„Éº„Ç∂„Éº: {user_id[:10]}..."
            )
            return True

        except requests.exceptions.RequestException as e:
            self.logger.error(f"LINE „Éó„ÉÉ„Ç∑„É•„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: {e}")
            if hasattr(e, "response") and e.response is not None:
                self.logger.error(f"Response status: {e.response.status_code}")
                self.logger.error(f"Response body: {e.response.text}")
            return False
        except Exception as e:
            self.logger.error(f"‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {e}")
            return False

    def send_text_message(self, user_id: str, text: str) -> bool:
        """
        „ÉÜ„Ç≠„Çπ„Éà„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°

        Args:
            user_id: ÈÄÅ‰ø°ÂÖà„É¶„Éº„Ç∂„ÉºID
            text: ÈÄÅ‰ø°„Åô„Çã„ÉÜ„Ç≠„Çπ„Éà

        Returns:
            bool: ÈÄÅ‰ø°ÊàêÂäü„ÉªÂ§±Êïó
        """
        message = {"type": "text", "text": text}
        return self.send_push_message(user_id, [message])

    def send_flex_message(
        self, user_id: str, alt_text: str, flex_contents: Dict
    ) -> bool:
        """
        Flex„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°

        Args:
            user_id: ÈÄÅ‰ø°ÂÖà„É¶„Éº„Ç∂„ÉºID
            alt_text: ‰ª£Êõø„ÉÜ„Ç≠„Çπ„Éà
            flex_contents: Flex„É°„ÉÉ„Çª„Éº„Ç∏ÂÜÖÂÆπ

        Returns:
            bool: ÈÄÅ‰ø°ÊàêÂäü„ÉªÂ§±Êïó
        """
        message = {"type": "flex", "altText": alt_text, "contents": flex_contents}
        return self.send_push_message(user_id, [message])

    def start_loading_animation(self, user_id: str, loading_seconds: int = 5) -> bool:
        """
        Loading Animation ÈñãÂßã

        Args:
            user_id: ÂØæË±°„É¶„Éº„Ç∂„ÉºID
            loading_seconds: Ë°®Á§∫ÊôÇÈñìÔºàÁßíÔºâ

        Returns:
            bool: ÈñãÂßãÊàêÂäü„ÉªÂ§±Êïó
        """
        try:
            url = f"{self.base_url}/chat/loading/start"
            payload = {"chatId": user_id, "loadingSeconds": loading_seconds}

            response = self.session.post(url, json=payload, timeout=10)
            response.raise_for_status()

            self.logger.info(
                f"Loading Animation „ÇíÈñãÂßã„Åó„Åæ„Åó„Åü„ÄÇ„É¶„Éº„Ç∂„Éº: {user_id[:10]}..."
            )
            return True

        except requests.exceptions.RequestException as e:
            self.logger.warning(f"Loading Animation „ÅÆÈñãÂßã„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: {e}")
            return False
        except Exception as e:
            self.logger.warning(f"Loading Animation ÈñãÂßãÊôÇ„Å´‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº: {e}")
            return False

    def verify_signature(self, body: str, signature: str) -> bool:
        """
        LINEÁΩ≤ÂêçÊ§úË®º

        Args:
            body: „É™„ÇØ„Ç®„Çπ„Éà„Éú„Éá„Ç£
            signature: X-Line-Signature „Éò„ÉÉ„ÉÄ„Éº„ÅÆÂÄ§

        Returns:
            bool: ÁΩ≤ÂêçÊ§úË®ºÁµêÊûú
        """
        if not self.channel_secret:
            self.logger.warning("Channel Secret „ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì")
            return False

        try:
            hash_digest = hmac.new(
                self.channel_secret.encode(), body.encode(), hashlib.sha256
            ).digest()
            expected_signature = base64.b64encode(hash_digest).decode()

            is_valid = hmac.compare_digest(signature, expected_signature)

            if is_valid:
                self.logger.info("LINEÁΩ≤ÂêçÊ§úË®º„Å´ÊàêÂäü„Åó„Åæ„Åó„Åü")
            else:
                self.logger.warning("LINEÁΩ≤ÂêçÊ§úË®º„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")

            return is_valid

        except Exception as e:
            self.logger.error(f"ÁΩ≤ÂêçÊ§úË®º‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {e}")
            return False


class FlexMessageBuilder:
    """Flex „É°„ÉÉ„Çª„Éº„Ç∏‰ΩúÊàê„Éò„É´„Éë„Éº"""

    # „Ç´„ÉÜ„Ç¥„É™Ë®≠ÂÆö
    FEED_CATEGORIES = {
        "„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞": {"color": "#2E7D32", "icon": "üíª", "priority": 1},
        "„ÉÜ„ÇØ„Éé„É≠„Ç∏„Éº": {"color": "#1976D2", "icon": "üîß", "priority": 2},
        "„Éû„É≥„Ç¨„Éª„Ç®„É≥„Çø„É°": {"color": "#F57C00", "icon": "üéÆ", "priority": 3},
        "„Éã„É•„Éº„Çπ": {"color": "#5D4037", "icon": "üì∞", "priority": 4},
        "„Åù„ÅÆ‰ªñ": {"color": "#616161", "icon": "üìù", "priority": 99},
    }

    @classmethod
    def create_carousel_message(
        cls, categorized_articles: Dict[str, List[Dict]]
    ) -> Dict:
        """
        „Ç´„ÉÜ„Ç¥„É™Âà•Ë®ò‰∫ã„ÅÆ„Ç´„É´„Éº„Çª„É´„É°„ÉÉ„Çª„Éº„Ç∏‰ΩúÊàê

        Args:
            categorized_articles: „Ç´„ÉÜ„Ç¥„É™Âà•Ë®ò‰∫ãËæûÊõ∏

        Returns:
            Dict: Flex„Ç´„É´„Éº„Çª„É´„É°„ÉÉ„Çª„Éº„Ç∏
        """
        try:
            # Ë®ò‰∫ã„Åå„Å™„ÅÑÂ†¥Âêà„ÅØË®ò‰∫ã„Å™„Åó„É°„ÉÉ„Çª„Éº„Ç∏
            if not categorized_articles:
                return cls._create_no_articles_message()

            # ÈÄöÂ∏∏„ÅÆ„Ç´„É´„Éº„Çª„É´‰ΩúÊàê
            bubbles = []

            # 1. Ê¶ÇË¶Å„Éê„Éñ„É´‰ΩúÊàê
            summary_bubble = cls._create_overview_bubble(categorized_articles)
            bubbles.append(summary_bubble)

            # 2. „Ç´„ÉÜ„Ç¥„É™Âà•„Éê„Éñ„É´‰ΩúÊàê
            for category, articles in categorized_articles.items():
                if not articles:
                    continue

                bubble = cls._create_category_bubble(category, articles)
                if bubble:
                    bubbles.append(bubble)

            # „Ç´„É´„Éº„Çª„É´„Å®„Åó„Å¶ËøîÂç¥
            carousel = {"type": "carousel", "contents": bubbles}

            logger.info(f"„Ç´„É´„Éº„Çª„É´„É°„ÉÉ„Çª„Éº„Ç∏„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü„ÄÇ„Éê„Éñ„É´Êï∞: {len(bubbles)}")
            return carousel

        except Exception as e:
            logger.error(f"„Ç´„É´„Éº„Çª„É´„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆ‰ΩúÊàê„Åß„Ç®„É©„Éº: {e}")
            return cls._create_no_articles_message()

    @classmethod
    def _create_single_bubble_fallback(
        cls, categorized_articles: Dict[str, List[Dict]]
    ) -> Dict:
        """ÊúÄÁµÇ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºöÂçò‰∏Ä„Éê„Éñ„É´„É°„ÉÉ„Çª„Éº„Ç∏"""
        try:
            total_articles = sum(
                len(articles) for articles in categorized_articles.values()
            )

            # ÊúÄÈ´ò„Çπ„Ç≥„Ç¢Ë®ò‰∫ãÂèñÂæó
            top_article = None
            max_score = 0

            for articles in categorized_articles.values():
                for article in articles:
                    score = article.get("metadata", {}).get("priority_score", 0)
                    if score > max_score:
                        max_score = score
                        top_article = article

            contents = [
                {
                    "type": "text",
                    "text": "üì∞ RSSÈÄöÁü•",
                    "size": "xl",
                    "weight": "bold",
                    "align": "center",
                },
                {
                    "type": "text",
                    "text": f"Êñ∞ÁùÄË®ò‰∫ã {total_articles}‰ª∂",
                    "size": "md",
                    "align": "center",
                    "margin": "md",
                },
            ]

            if top_article:
                contents.extend(
                    [
                        {"type": "separator", "margin": "lg"},
                        {
                            "type": "text",
                            "text": "üèÜ Ê≥®ÁõÆË®ò‰∫ã",
                            "size": "md",
                            "weight": "bold",
                            "margin": "lg",
                        },
                        {
                            "type": "text",
                            "text": top_article["title"],
                            "size": "sm",
                            "wrap": True,
                            "maxLines": 3,
                            "margin": "sm",
                        },
                    ]
                )

            bubble = {
                "type": "bubble",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": contents,
                    "paddingAll": "20px",
                },
                "action": {
                    "type": "uri",
                    "uri": (
                        top_article["link"] if top_article else "https://example.com"
                    ),
                },
            }

            logger.info("Âçò‰∏Ä„Éê„Éñ„É´„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„É°„ÉÉ„Çª„Éº„Ç∏„Çí‰ΩúÊàê")
            return bubble

        except Exception as e:
            logger.error(f"Âçò‰∏Ä„Éê„Éñ„É´„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ‰ΩúÊàê„Åß„Ç®„É©„Éº: {e}")
            return cls._create_error_message()

    @classmethod
    def _create_overview_bubble(
        cls, categorized_articles: Dict[str, List[Dict]]
    ) -> Dict:
        """
        Ê¶ÇË¶Å„Éê„Éñ„É´‰ΩúÊàêÔºàrss-line-notifier v2.1„Åã„ÇâÁßªÊ§çÔºâ
        ÂÖ®Ë®ò‰∫ã„ÅÆÁµ±Ë®àÊÉÖÂ†±„Å®„Éà„ÉÉ„ÉóË®ò‰∫ã„ÅÆ„Éè„Ç§„É©„Ç§„ÉàË°®Á§∫
        """
        try:
            # Áµ±Ë®àÊÉÖÂ†±Ë®àÁÆó
            total_articles = sum(
                len(articles) for articles in categorized_articles.values()
            )
            category_count = len(categorized_articles)

            # „Éà„ÉÉ„ÉóË®ò‰∫ãÊäΩÂá∫ÔºàÊúÄÈ´ò„Çπ„Ç≥„Ç¢„ÅÆË®ò‰∫ãÔºâ
            top_article = None
            max_score = 0

            for articles in categorized_articles.values():
                for article in articles:
                    score = article.get("metadata", {}).get("priority_score", 0)
                    if score > max_score:
                        max_score = score
                        top_article = article

            # Ë®ò‰∫ã„Çø„Ç§„ÉóÁµ±Ë®à
            type_stats = {}
            for articles in categorized_articles.values():
                for article in articles:
                    article_type = article.get("metadata", {}).get("article_type", "üì∞")
                    type_stats[article_type] = type_stats.get(article_type, 0) + 1

            # „Éà„ÉÉ„Éó3„Çø„Ç§„ÉóÂèñÂæó
            top_types = sorted(type_stats.items(), key=lambda x: x[1], reverse=True)[:3]
            type_summary = " ".join(
                [f"{type_icon}{count}" for type_icon, count in top_types]
            )

            body_contents = [
                {
                    "type": "text",
                    "text": "üì∞ RSSÈÄöÁü•„Çµ„Éû„É™„Éº",
                    "size": "xl",
                    "weight": "bold",
                    "color": "#FFFFFF",
                },
                {
                    "type": "text",
                    "text": f"Êñ∞ÁùÄË®ò‰∫ã {total_articles}‰ª∂ ({category_count}„Ç´„ÉÜ„Ç¥„É™)",
                    "size": "md",
                    "color": "#FFFFFF",
                    "margin": "md",
                },
            ]

            if type_summary:
                body_contents.append(
                    {
                        "type": "text",
                        "text": type_summary,
                        "size": "sm",
                        "color": "#FFFFFF",
                        "margin": "sm",
                    }
                )

            # „Éà„ÉÉ„ÉóË®ò‰∫ãË°®Á§∫
            if top_article:
                body_contents.extend(
                    [
                        {"type": "separator", "margin": "lg", "color": "#FFFFFF"},
                        {
                            "type": "text",
                            "text": "üèÜ Ê≥®ÁõÆË®ò‰∫ã",
                            "size": "md",
                            "weight": "bold",
                            "color": "#FFFFFF",
                            "margin": "lg",
                        },
                        {
                            "type": "text",
                            "text": top_article["title"],
                            "size": "sm",
                            "color": "#FFFFFF",
                            "wrap": True,
                            "maxLines": 2,
                            "margin": "sm",
                        },
                    ]
                )

                # „É°„Çø„Éá„Éº„ÇøË°®Á§∫
                metadata = top_article.get("metadata", {})
                meta_parts = []
                if metadata.get("article_type"):
                    meta_parts.append(metadata["article_type"])
                if metadata.get("difficulty"):
                    meta_parts.append(metadata["difficulty"])
                if metadata.get("reading_time"):
                    meta_parts.append(metadata["reading_time"])

                if meta_parts:
                    body_contents.append(
                        {
                            "type": "text",
                            "text": " ¬∑ ".join(meta_parts),
                            "size": "xs",
                            "color": "#FFFFFF",
                            "margin": "xs",
                        }
                    )

            # „Ç∞„É©„Éá„Éº„Ç∑„Éß„É≥ËÉåÊôØ
            bubble = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": body_contents,
                    "paddingAll": "20px",
                    "backgroundColor": "#4A90E2",
                },
                "styles": {"body": {"backgroundColor": "#4A90E2"}},
                "action": {
                    "type": "uri",
                    "uri": (
                        top_article["link"] if top_article else "https://example.com"
                    ),
                },
            }

            return bubble

        except Exception as e:
            logger.error(f"Ê¶ÇË¶Å„Éê„Éñ„É´‰ΩúÊàê„Åß„Ç®„É©„Éº: {e}")
            return cls._create_fallback_overview_bubble(categorized_articles)

    @classmethod
    def _create_fallback_overview_bubble(
        cls, categorized_articles: Dict[str, List[Dict]]
    ) -> Dict:
        """Ê¶ÇË¶Å„Éê„Éñ„É´‰ΩúÊàêÂ§±ÊïóÊôÇ„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ"""
        total_articles = sum(
            len(articles) for articles in categorized_articles.values()
        )

        return {
            "type": "bubble",
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": "üì∞ RSSÈÄöÁü•",
                        "size": "xl",
                        "weight": "bold",
                        "align": "center",
                        "color": "#FFFFFF",
                    },
                    {
                        "type": "text",
                        "text": f"Êñ∞ÁùÄË®ò‰∫ã {total_articles}‰ª∂",
                        "size": "md",
                        "align": "center",
                        "margin": "md",
                        "color": "#FFFFFF",
                    },
                ],
                "paddingAll": "20px",
                "backgroundColor": "#4A90E2",
            },
        }

    @classmethod
    def _create_category_bubble(cls, category: str, articles: List[Dict]) -> Dict:
        """„Ç´„ÉÜ„Ç¥„É™Âà•„Éê„Éñ„É´‰ΩúÊàê"""
        try:
            category_info = cls.FEED_CATEGORIES.get(
                category, cls.FEED_CATEGORIES["„Åù„ÅÆ‰ªñ"]
            )

            # „Éò„ÉÉ„ÉÄ„Éº‰ΩúÊàê
            header = {
                "type": "box",
                "layout": "horizontal",
                "contents": [
                    {
                        "type": "text",
                        "text": f"{category_info['icon']} {category}",
                        "size": "lg",
                        "color": "#FFFFFF",
                        "flex": 1,
                    },
                    {
                        "type": "text",
                        "text": f"{len(articles)}‰ª∂",
                        "size": "sm",
                        "color": "#FFFFFF",
                        "align": "end",
                    },
                ],
                "backgroundColor": category_info["color"],
                "paddingAll": "15px",
            }

            # „Éú„Éá„Ç£‰ΩúÊàê
            body_contents = []

            for i, article in enumerate(articles[:10]):  # ÊúÄÂ§ß10Ë®ò‰∫ã„Åæ„ÅßË°®Á§∫
                article_box = cls._create_article_box(article, i + 1)
                body_contents.append(article_box)

                # Ë®ò‰∫ãÈñì„ÅÆÂå∫Âàá„ÇäÁ∑öÔºàÊúÄÂæå„ÅÆË®ò‰∫ã‰ª•Â§ñÔºâ
                if i < len(articles[:10]) - 1:
                    body_contents.append({"type": "separator", "margin": "md"})

            body = {
                "type": "box",
                "layout": "vertical",
                "contents": body_contents,
                "paddingAll": "15px",
            }

            bubble = {
                "type": "bubble",
                "size": "giga",
                "header": header,
                "body": body,
                "styles": {
                    "header": {"backgroundColor": category_info["color"]},
                    "body": {
                        "backgroundColor": "#FAFAFA",
                        "separator": True,
                        "separatorColor": "#E0E0E0",
                    },
                },
            }

            return bubble

        except Exception as e:
            logger.error(f"„Ç´„ÉÜ„Ç¥„É™„Éê„Éñ„É´‰ΩúÊàê„Åß„Ç®„É©„Éº: {e}")
            return None

    @classmethod
    def _create_article_box(cls, article: Dict, rank: int) -> Dict:
        """Ë®ò‰∫ã„Éú„ÉÉ„ÇØ„Çπ‰ΩúÊàêÔºàv2.1Âº∑ÂåñÁâàÔºâ"""
        try:
            # „É©„É≥„Ç≠„É≥„Ç∞ÁµµÊñáÂ≠ó
            rank_emoji = (
                "ü•á" if rank == 1 else "ü•à" if rank == 2 else "ü•â" if rank == 3 else ""
            )

            # v2.1 „É°„Çø„Éá„Éº„ÇøÂèñÂæó
            metadata = article.get("metadata", {})
            article_type = metadata.get("article_type", "üì∞")  # „Ç¢„Ç§„Ç≥„É≥Áõ¥Êé•ÂèñÂæó
            difficulty = metadata.get("difficulty", "")
            reading_time = metadata.get("reading_time", "")
            priority_score = metadata.get("priority_score", 0)

            # „É°„ÇøÊÉÖÂ†±ÊñáÂ≠óÂàó‰ΩúÊàêÔºàv2.1Âº∑ÂåñÔºâ
            meta_parts = []

            # Ë®ò‰∫ã„Çø„Ç§„ÉóÔºà„Ç¢„Ç§„Ç≥„É≥ÂΩ¢ÂºèÔºâ
            if article_type:
                if difficulty:
                    meta_parts.append(f"{article_type} {difficulty}")
                else:
                    meta_parts.append(article_type)

            if reading_time:
                meta_parts.append(reading_time)

            # ÂÖ¨ÈñãÊôÇÈñìÂèñÂæóÔºàÊîπËâØÁâàÔºâ
            published_at = article.get("published_at", "")
            if published_at:
                try:
                    pub_datetime = datetime.fromisoformat(
                        published_at.replace("Z", "+00:00")
                    )
                    now = datetime.now(pub_datetime.tzinfo)
                    time_diff = now - pub_datetime

                    if time_diff.days > 0:
                        meta_parts.append(f"{time_diff.days}Êó•Ââç")
                    elif time_diff.seconds > 3600:
                        hours = time_diff.seconds // 3600
                        meta_parts.append(f"{hours}ÊôÇÈñìÂâç")
                    else:
                        minutes = max(1, time_diff.seconds // 60)
                        meta_parts.append(f"{minutes}ÂàÜÂâç")
                except:
                    pass

            # È´òÂÑ™ÂÖàÂ∫¶„Çπ„Ç≥„Ç¢„ÅÆË®ò‰∫ã„Å´„Çπ„Ç≥„Ç¢Ë°®Á§∫
            if priority_score >= 80:
                meta_parts.append(f"‚≠ê{int(priority_score)}")

            meta_text = " ¬∑ ".join(meta_parts)

            # „Çø„Ç§„Éà„É´‰ΩúÊàêÔºà„É©„É≥„Ç≠„É≥„Ç∞ + „Çø„Ç§„Éà„É´Ôºâ
            title_text = (
                f"{rank_emoji} {article['title']}" if rank_emoji else article["title"]
            )

            # ËÉåÊôØËâ≤Ê±∫ÂÆöÔºàv2.1Âº∑ÂåñÔºâ
            bg_color = "#FFF9C4"  # „Éá„Éï„Ç©„É´„ÉàÔºàTOP3„Ç¥„Éº„É´„ÉâÔºâ
            if rank == 1 and priority_score >= 90:
                bg_color = "#FFE082"  # ÊúÄÂÑ™ÂÖàË®ò‰∫ãÔºà„Çà„ÇäÊøÉ„ÅÑ„Ç¥„Éº„É´„ÉâÔºâ
            elif rank <= 3:
                bg_color = "#FFF9C4"  # TOP3Ôºà„É©„Ç§„Éà„Ç¥„Éº„É´„ÉâÔºâ
            elif priority_score >= 70:
                bg_color = "#E8F5E8"  # È´òÂÑ™ÂÖàÂ∫¶Ôºà„É©„Ç§„Éà„Ç∞„É™„Éº„É≥Ôºâ
            else:
                bg_color = "#F5F5F5"  # ÈÄöÂ∏∏

            article_box = {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": title_text,
                        "size": "md",
                        "wrap": True,
                        "maxLines": 2,
                        "color": "#333333",
                    }
                ],
                "action": {"type": "uri", "uri": article["link"]},
                "paddingAll": "12px",
                "cornerRadius": "8px",
                "backgroundColor": bg_color,
            }

            # „É°„ÇøÊÉÖÂ†±ËøΩÂä†
            if meta_text:
                article_box["contents"].append(
                    {
                        "type": "text",
                        "text": meta_text,
                        "size": "xs",
                        "color": "#666666",
                        "margin": "sm",
                    }
                )

            # v2.1: Â¢ÉÁïåÁ∑öËøΩÂä†ÔºàTOP3Ë®ò‰∫ãÔºâ
            if rank <= 3:
                article_box["borderWidth"] = "2px"
                article_box["borderColor"] = (
                    "#FFD700" if rank == 1 else "#C0C0C0" if rank == 2 else "#CD7F32"
                )

            return article_box

        except Exception as e:
            logger.error(f"Ë®ò‰∫ã„Éú„ÉÉ„ÇØ„Çπ‰ΩúÊàê„Åß„Ç®„É©„Éº: {e}")
            return {
                "type": "text",
                "text": f"Ë®ò‰∫ã{rank}: {article.get('title', '„Çø„Ç§„Éà„É´‰∏çÊòé')}",
                "wrap": True,
            }

    @classmethod
    def _create_no_articles_message(cls) -> Dict:
        """Ë®ò‰∫ã„Å™„Åó„É°„ÉÉ„Çª„Éº„Ç∏‰ΩúÊàê"""
        return {
            "type": "bubble",
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": "üì∞ RSSÈÄöÁü•",
                        "size": "lg",
                        "weight": "bold",
                        "align": "center",
                    },
                    {
                        "type": "text",
                        "text": "Êñ∞ÁùÄË®ò‰∫ã„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü",
                        "size": "md",
                        "align": "center",
                        "margin": "md",
                        "color": "#666666",
                    },
                ],
                "paddingAll": "20px",
            },
        }

    @classmethod
    def _create_action_bubble(cls, categorized_articles: Dict[str, List[Dict]]) -> Dict:
        """
        „Ç¢„ÇØ„Ç∑„Éß„É≥„Éê„Éñ„É´‰ΩúÊàêÔºàrss-line-notifier v2.1„Åã„ÇâÁßªÊ§çÔºâ
        „Éï„Ç£„Éº„ÉâÁÆ°ÁêÜ„ÉªÈÄöÁü•Ë®≠ÂÆö„ÉªÁµ±Ë®àË°®Á§∫„ÅÆ„Ç¢„ÇØ„Ç∑„Éß„É≥Ê©üËÉΩ
        """
        try:
            total_articles = sum(
                len(articles) for articles in categorized_articles.values()
            )

            # ÊôÇÂàªÂèñÂæóÔºàJSTÔºâ
            now = datetime.now(timezone.utc).astimezone()
            time_str = now.strftime("%H:%M")

            body_contents = [
                {
                    "type": "text",
                    "text": "‚öôÔ∏è Êìç‰Ωú„É°„Éã„É•„Éº",
                    "size": "xl",
                    "weight": "bold",
                    "color": "#FFFFFF",
                    "align": "center",
                },
                {
                    "type": "text",
                    "text": f"Êõ¥Êñ∞ÊôÇÂàª: {time_str}",
                    "size": "xs",
                    "color": "#FFFFFF",
                    "align": "center",
                    "margin": "sm",
                },
                {"type": "separator", "margin": "lg", "color": "#FFFFFF"},
            ]

            # „Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥‰ΩúÊàê
            action_buttons = [
                {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                        {
                            "type": "text",
                            "text": "üîÑ ÊâãÂãïÊõ¥Êñ∞",
                            "size": "sm",
                            "color": "#FFFFFF",
                            "flex": 1,
                        }
                    ],
                    "backgroundColor": "#28A745",
                    "paddingAll": "12px",
                    "cornerRadius": "8px",
                    "margin": "md",
                },
                {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                        {
                            "type": "text",
                            "text": "üìä Áµ±Ë®àË°®Á§∫",
                            "size": "sm",
                            "color": "#FFFFFF",
                            "flex": 1,
                        }
                    ],
                    "backgroundColor": "#17A2B8",
                    "paddingAll": "12px",
                    "cornerRadius": "8px",
                    "margin": "md",
                },
                {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                        {
                            "type": "text",
                            "text": "‚öôÔ∏è „Éï„Ç£„Éº„ÉâË®≠ÂÆö",
                            "size": "sm",
                            "color": "#FFFFFF",
                            "flex": 1,
                        }
                    ],
                    "backgroundColor": "#6F42C1",
                    "paddingAll": "12px",
                    "cornerRadius": "8px",
                    "margin": "md",
                },
            ]

            body_contents.extend(action_buttons)

            # „Éï„ÉÉ„Çø„ÉºÊÉÖÂ†±
            body_contents.extend(
                [
                    {"type": "separator", "margin": "lg", "color": "#FFFFFF"},
                    {
                        "type": "text",
                        "text": f"‰ªäÂõû„ÅÆÈÄöÁü•: {total_articles}‰ª∂",
                        "size": "xs",
                        "color": "#FFFFFF",
                        "align": "center",
                        "margin": "md",
                    },
                ]
            )

            bubble = {
                "type": "bubble",
                "size": "giga",
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": body_contents,
                    "paddingAll": "20px",
                    "backgroundColor": "#6C757D",
                },
                "styles": {"body": {"backgroundColor": "#6C757D"}},
            }

            return bubble

        except Exception as e:
            logger.error(f"„Ç¢„ÇØ„Ç∑„Éß„É≥„Éê„Éñ„É´‰ΩúÊàê„Åß„Ç®„É©„Éº: {e}")
            return cls._create_fallback_action_bubble()

    @classmethod
    def _create_fallback_action_bubble(cls) -> Dict:
        """„Ç¢„ÇØ„Ç∑„Éß„É≥„Éê„Éñ„É´‰ΩúÊàêÂ§±ÊïóÊôÇ„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ"""
        return {
            "type": "bubble",
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": "‚öôÔ∏è Êìç‰Ωú„É°„Éã„É•„Éº",
                        "size": "lg",
                        "weight": "bold",
                        "align": "center",
                        "color": "#FFFFFF",
                    },
                    {
                        "type": "text",
                        "text": "ÊâãÂãïÊõ¥Êñ∞„ÉªË®≠ÂÆöÂ§âÊõ¥",
                        "size": "sm",
                        "align": "center",
                        "margin": "md",
                        "color": "#FFFFFF",
                    },
                ],
                "paddingAll": "20px",
                "backgroundColor": "#6C757D",
            },
        }
